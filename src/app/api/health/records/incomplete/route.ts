// /app/api/health/records/incomplete/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getCurrentUser } from '@/lib/supabase/server'
import { getUserRole } from '@/lib/database/auth'
import { createServerSupabaseClient } from '@/lib/supabase/server'

export async function GET(request: NextRequest) {
  try {
    console.log('🔍 [API] Incomplete Health Records GET request received')
    
    const user = await getCurrentUser()
    
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const userRole = await getUserRole(user.id)
    
    if (!userRole?.farm_id) {
      return NextResponse.json({ error: 'No farm associated with user' }, { status: 400 })
    }

    const supabase = await createServerSupabaseClient()
    
    // Query for incomplete health records
    // Records are considered incomplete if they were auto-generated and have minimal information
    const { data: records, error } = await supabase
      .from('animal_health_records')
      .select(`
        id,
        animal_id,
        record_date,
        record_type,
        description,
        severity,
        created_at,
        veterinarian,
        symptoms,
        medication,
        cost,
        notes,
        animals!inner (
          id,
          tag_number,
          name,
          breed,
          farm_id
        )
      `)
      .eq('animals.farm_id', userRole.farm_id)
      .eq('animals.status', 'active')
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (error) {
      console.error('Error fetching incomplete health records:', error)
      return NextResponse.json({ error: 'Failed to fetch records' }, { status: 500 })
    }
    
    // Filter for records that appear to be auto-generated or incomplete
    const incompleteRecords = (records || []).filter(record => {
      // Consider a record incomplete if it has minimal information
      const hasMinimalInfo = !record.veterinarian && 
                            !record.symptoms && 
                            !record.medication && 
                            !record.cost &&
                            (!record.notes || record.notes.length < 50)
      
      // Also check if description suggests auto-generation
      const isAutoGenerated = record.description && (
        record.description.includes('registered with') ||
        record.description.includes('requires medical evaluation') ||
        record.description.includes('needs assessment') ||
        record.description.includes('potential health concern')
      )
      
      return hasMinimalInfo || isAutoGenerated
    })
    
    console.log(`Found ${incompleteRecords.length} incomplete health records`)
    
    return NextResponse.json({ 
      success: true, 
      records: incompleteRecords,
      total: incompleteRecords.length
    })
    
  } catch (error) {
    console.error('❌ [API] Incomplete Health Records error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}